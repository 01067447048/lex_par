IMPORT('import')
IDENTIFIER('time')
IMPORT('import')
IDENTIFIER('hashlib')
IMPORT('import')
IDENTIFIER('json')
IMPORT('import')
IDENTIFIER('requests')
IMPORT('import')
IDENTIFIER('base64')
IDENTIFIER('from')
IDENTIFIER('flask')
IMPORT('import')
IDENTIFIER('Flask')
COMMA(',')
IDENTIFIER('request')
IDENTIFIER('from')
IDENTIFIER('multiprocessing')
IMPORT('import')
IDENTIFIER('Process')
COMMA(',')
IDENTIFIER('Pipe')
IMPORT('import')
IDENTIFIER('ecdsa')
IDENTIFIER('from')
IDENTIFIER('miner')
UNKNOWN('_')
IDENTIFIER('config')
IMPORT('import')
IDENTIFIER('MINER')
UNKNOWN('_')
IDENTIFIER('ADDRESS')
COMMA(',')
IDENTIFIER('MINER')
UNKNOWN('_')
IDENTIFIER('NODE')
UNKNOWN('_')
IDENTIFIER('URL')
COMMA(',')
IDENTIFIER('PEER')
UNKNOWN('_')
IDENTIFIER('NODES')
IDENTIFIER('node')
EQUAL('=')
IDENTIFIER('Flask')
LEFT_PAREN('(')
UNKNOWN('_')
UNKNOWN('_')
IDENTIFIER('name')
UNKNOWN('_')
UNKNOWN('_')
RIGHT_PAREN(')')
CLASS('class')
IDENTIFIER('Block')
COLON(':')
FUN('def')
UNKNOWN('_')
UNKNOWN('_')
IDENTIFIER('init')
UNKNOWN('_')
UNKNOWN('_')
LEFT_PAREN('(')
IDENTIFIER('self')
COMMA(',')
IDENTIFIER('index')
COMMA(',')
IDENTIFIER('timestamp')
COMMA(',')
IDENTIFIER('data')
COMMA(',')
IDENTIFIER('previous')
UNKNOWN('_')
IDENTIFIER('hash')
RIGHT_PAREN(')')
COLON(':')
DOUBLE_STRING('""')
DOUBLE_STRING('"Returns a new Block object. Each block is "')
IDENTIFIER('chained')
DOUBLE_STRING('" to its previous
        by calling its unique hash.
        Args:
            index (int): Block number.
            timestamp (int): Block creation timestamp.
            data (str): Data to be sent.
            previous_hash(str): String representing previous block unique hash.
        Attrib:
            index (int): Block number.
            timestamp (int): Block creation timestamp.
            data (str): Data to be sent.
            previous_hash(str): String representing previous block unique hash.
            hash(str): Current block unique hash.
        "')
DOUBLE_STRING('""')
IDENTIFIER('self')
DOT('.')
IDENTIFIER('index')
EQUAL('=')
IDENTIFIER('index')
IDENTIFIER('self')
DOT('.')
IDENTIFIER('timestamp')
EQUAL('=')
IDENTIFIER('timestamp')
IDENTIFIER('self')
DOT('.')
IDENTIFIER('data')
EQUAL('=')
IDENTIFIER('data')
IDENTIFIER('self')
DOT('.')
IDENTIFIER('previous')
UNKNOWN('_')
IDENTIFIER('hash')
EQUAL('=')
IDENTIFIER('previous')
UNKNOWN('_')
IDENTIFIER('hash')
IDENTIFIER('self')
DOT('.')
IDENTIFIER('hash')
EQUAL('=')
IDENTIFIER('self')
DOT('.')
IDENTIFIER('hash')
UNKNOWN('_')
IDENTIFIER('block')
LEFT_PAREN('(')
RIGHT_PAREN(')')
FUN('def')
IDENTIFIER('hash')
UNKNOWN('_')
IDENTIFIER('block')
LEFT_PAREN('(')
IDENTIFIER('self')
RIGHT_PAREN(')')
COLON(':')
DOUBLE_STRING('""')
DOUBLE_STRING('"Creates the unique hash for the block. It uses sha256."')
DOUBLE_STRING('""')
IDENTIFIER('sha')
EQUAL('=')
IDENTIFIER('hashlib')
DOT('.')
IDENTIFIER('sha256')
LEFT_PAREN('(')
RIGHT_PAREN(')')
IDENTIFIER('sha')
DOT('.')
IDENTIFIER('update')
LEFT_PAREN('(')
LEFT_PAREN('(')
IDENTIFIER('str')
LEFT_PAREN('(')
IDENTIFIER('self')
DOT('.')
IDENTIFIER('index')
RIGHT_PAREN(')')
PLUS('+')
IDENTIFIER('str')
LEFT_PAREN('(')
IDENTIFIER('self')
DOT('.')
IDENTIFIER('timestamp')
RIGHT_PAREN(')')
PLUS('+')
IDENTIFIER('str')
LEFT_PAREN('(')
IDENTIFIER('self')
DOT('.')
IDENTIFIER('data')
RIGHT_PAREN(')')
PLUS('+')
IDENTIFIER('str')
LEFT_PAREN('(')
IDENTIFIER('self')
DOT('.')
IDENTIFIER('previous')
UNKNOWN('_')
IDENTIFIER('hash')
RIGHT_PAREN(')')
RIGHT_PAREN(')')
DOT('.')
IDENTIFIER('encode')
LEFT_PAREN('(')
SINGLE_STRING(''utf-8'')
RIGHT_PAREN(')')
RIGHT_PAREN(')')
RETURN('return')
IDENTIFIER('sha')
DOT('.')
IDENTIFIER('hexdigest')
LEFT_PAREN('(')
RIGHT_PAREN(')')
FUN('def')
IDENTIFIER('create')
UNKNOWN('_')
IDENTIFIER('genesis')
UNKNOWN('_')
IDENTIFIER('block')
LEFT_PAREN('(')
RIGHT_PAREN(')')
COLON(':')
DOUBLE_STRING('""')
DOUBLE_STRING('"To create each block, it needs the hash of the previous one. First
    block has no previous, so it must be created manually (with index zero
     and arbitrary previous hash)"')
DOUBLE_STRING('""')
RETURN('return')
IDENTIFIER('Block')
LEFT_PAREN('(')
NUMBER('0')
COMMA(',')
IDENTIFIER('time')
DOT('.')
IDENTIFIER('time')
LEFT_PAREN('(')
RIGHT_PAREN(')')
COMMA(',')
LEFT_BRACE('{')
DOUBLE_STRING('"proof-of-work"')
COLON(':')
NUMBER('9')
COMMA(',')
DOUBLE_STRING('"transactions"')
COLON(':')
IDENTIFIER('None')
RIGHT_BRACE('}')
COMMA(',')
DOUBLE_STRING('"0"')
RIGHT_PAREN(')')
IDENTIFIER('BLOCKCHAIN')
EQUAL('=')
LEFT_BRACKET('[')
IDENTIFIER('create')
UNKNOWN('_')
IDENTIFIER('genesis')
UNKNOWN('_')
IDENTIFIER('block')
LEFT_PAREN('(')
RIGHT_PAREN(')')
RIGHT_BRACKET(']')
DOUBLE_STRING('""')
DOUBLE_STRING('" Stores the transactions that this node has in a list.
If the node you sent the transaction adds a block
it will get accepted, but there is a chance it gets
discarded and your transaction goes back as if it was never
processed"')
DOUBLE_STRING('""')
IDENTIFIER('NODE')
UNKNOWN('_')
IDENTIFIER('PENDING')
UNKNOWN('_')
IDENTIFIER('TRANSACTIONS')
EQUAL('=')
LEFT_BRACKET('[')
RIGHT_BRACKET(']')
FUN('def')
IDENTIFIER('proof')
UNKNOWN('_')
IDENTIFIER('of')
UNKNOWN('_')
IDENTIFIER('work')
LEFT_PAREN('(')
IDENTIFIER('last')
UNKNOWN('_')
IDENTIFIER('proof')
COMMA(',')
IDENTIFIER('blockchain')
RIGHT_PAREN(')')
COLON(':')
IDENTIFIER('incrementer')
EQUAL('=')
IDENTIFIER('last')
UNKNOWN('_')
IDENTIFIER('proof')
PLUS('+')
NUMBER('1')
IDENTIFIER('start')
UNKNOWN('_')
IDENTIFIER('time')
EQUAL('=')
IDENTIFIER('time')
DOT('.')
IDENTIFIER('time')
LEFT_PAREN('(')
RIGHT_PAREN(')')
WHILE('while')
NOT('not')
LEFT_PAREN('(')
IDENTIFIER('incrementer')
MODULAR('%')
NUMBER('7919')
EQUAL_EQUAL('==')
NUMBER('0')
AND('and')
IDENTIFIER('incrementer')
MODULAR('%')
IDENTIFIER('last')
UNKNOWN('_')
IDENTIFIER('proof')
EQUAL_EQUAL('==')
NUMBER('0')
RIGHT_PAREN(')')
COLON(':')
IDENTIFIER('incrementer')
PLUS('+')
EQUAL('=')
NUMBER('1')
IF('if')
IDENTIFIER('int')
LEFT_PAREN('(')
LEFT_PAREN('(')
IDENTIFIER('time')
DOT('.')
IDENTIFIER('time')
LEFT_PAREN('(')
RIGHT_PAREN(')')
MINUS('-')
IDENTIFIER('start')
UNKNOWN('_')
IDENTIFIER('time')
RIGHT_PAREN(')')
MODULAR('%')
NUMBER('60')
RIGHT_PAREN(')')
EQUAL_EQUAL('==')
NUMBER('0')
COLON(':')
NEW('new')
UNKNOWN('_')
IDENTIFIER('blockchain')
EQUAL('=')
IDENTIFIER('consensus')
LEFT_PAREN('(')
IDENTIFIER('blockchain')
RIGHT_PAREN(')')
IF('if')
NEW('new')
UNKNOWN('_')
IDENTIFIER('blockchain')
COLON(':')
RETURN('return')
IDENTIFIER('False')
COMMA(',')
NEW('new')
UNKNOWN('_')
IDENTIFIER('blockchain')
RETURN('return')
IDENTIFIER('incrementer')
COMMA(',')
IDENTIFIER('blockchain')
FUN('def')
IDENTIFIER('mine')
LEFT_PAREN('(')
IDENTIFIER('a')
COMMA(',')
IDENTIFIER('blockchain')
COMMA(',')
IDENTIFIER('node')
UNKNOWN('_')
IDENTIFIER('pending')
UNKNOWN('_')
IDENTIFIER('transactions')
RIGHT_PAREN(')')
COLON(':')
IDENTIFIER('BLOCKCHAIN')
EQUAL('=')
IDENTIFIER('blockchain')
IDENTIFIER('NODE')
UNKNOWN('_')
IDENTIFIER('PENDING')
UNKNOWN('_')
IDENTIFIER('TRANSACTIONS')
EQUAL('=')
IDENTIFIER('node')
UNKNOWN('_')
IDENTIFIER('pending')
UNKNOWN('_')
IDENTIFIER('transactions')
WHILE('while')
IDENTIFIER('True')
COLON(':')
DOUBLE_STRING('""')
DOUBLE_STRING('"Mining is the only way that new coins can be created.
        In order to prevent too many coins to be created, the process
        is slowed down by a proof of work algorithm.
        "')
DOUBLE_STRING('""')
IDENTIFIER('last')
UNKNOWN('_')
IDENTIFIER('block')
EQUAL('=')
IDENTIFIER('BLOCKCHAIN')
LEFT_BRACKET('[')
MINUS('-')
NUMBER('1')
RIGHT_BRACKET(']')
IDENTIFIER('last')
UNKNOWN('_')
IDENTIFIER('proof')
EQUAL('=')
IDENTIFIER('last')
UNKNOWN('_')
IDENTIFIER('block')
DOT('.')
IDENTIFIER('data')
LEFT_BRACKET('[')
SINGLE_STRING(''proof-of-work'')
RIGHT_BRACKET(']')
IDENTIFIER('proof')
EQUAL('=')
IDENTIFIER('proof')
UNKNOWN('_')
IDENTIFIER('of')
UNKNOWN('_')
IDENTIFIER('work')
LEFT_PAREN('(')
IDENTIFIER('last')
UNKNOWN('_')
IDENTIFIER('proof')
COMMA(',')
IDENTIFIER('BLOCKCHAIN')
RIGHT_PAREN(')')
IF('if')
NOT('not')
IDENTIFIER('proof')
LEFT_BRACKET('[')
NUMBER('0')
RIGHT_BRACKET(']')
COLON(':')
IDENTIFIER('BLOCKCHAIN')
EQUAL('=')
IDENTIFIER('proof')
LEFT_BRACKET('[')
NUMBER('1')
RIGHT_BRACKET(']')
IDENTIFIER('a')
DOT('.')
IDENTIFIER('send')
LEFT_PAREN('(')
IDENTIFIER('BLOCKCHAIN')
RIGHT_PAREN(')')
CONTINUE('continue')
ELSE('else')
COLON(':')
IDENTIFIER('NODE')
UNKNOWN('_')
IDENTIFIER('PENDING')
UNKNOWN('_')
IDENTIFIER('TRANSACTIONS')
EQUAL('=')
IDENTIFIER('requests')
DOT('.')
IDENTIFIER('get')
LEFT_PAREN('(')
IDENTIFIER('url')
EQUAL('=')
IDENTIFIER('MINER')
UNKNOWN('_')
IDENTIFIER('NODE')
UNKNOWN('_')
IDENTIFIER('URL')
PLUS('+')
SINGLE_STRING(''/txion'')
COMMA(',')
IDENTIFIER('params')
EQUAL('=')
LEFT_BRACE('{')
SINGLE_STRING(''update'')
COLON(':')
IDENTIFIER('MINER')
UNKNOWN('_')
IDENTIFIER('ADDRESS')
RIGHT_BRACE('}')
RIGHT_PAREN(')')
DOT('.')
IDENTIFIER('content')
IDENTIFIER('NODE')
UNKNOWN('_')
IDENTIFIER('PENDING')
UNKNOWN('_')
IDENTIFIER('TRANSACTIONS')
EQUAL('=')
IDENTIFIER('json')
DOT('.')
IDENTIFIER('loads')
LEFT_PAREN('(')
IDENTIFIER('NODE')
UNKNOWN('_')
IDENTIFIER('PENDING')
UNKNOWN('_')
IDENTIFIER('TRANSACTIONS')
RIGHT_PAREN(')')
IDENTIFIER('NODE')
UNKNOWN('_')
IDENTIFIER('PENDING')
UNKNOWN('_')
IDENTIFIER('TRANSACTIONS')
DOT('.')
IDENTIFIER('append')
LEFT_PAREN('(')
LEFT_BRACE('{')
DOUBLE_STRING('"from"')
COLON(':')
DOUBLE_STRING('"network"')
COMMA(',')
DOUBLE_STRING('"to"')
COLON(':')
IDENTIFIER('MINER')
UNKNOWN('_')
IDENTIFIER('ADDRESS')
COMMA(',')
DOUBLE_STRING('"amount"')
COLON(':')
NUMBER('1')
RIGHT_BRACE('}')
RIGHT_PAREN(')')
NEW('new')
UNKNOWN('_')
IDENTIFIER('block')
UNKNOWN('_')
IDENTIFIER('data')
EQUAL('=')
LEFT_BRACE('{')
DOUBLE_STRING('"proof-of-work"')
COLON(':')
IDENTIFIER('proof')
LEFT_BRACKET('[')
NUMBER('0')
RIGHT_BRACKET(']')
COMMA(',')
DOUBLE_STRING('"transactions"')
COLON(':')
IDENTIFIER('list')
LEFT_PAREN('(')
IDENTIFIER('NODE')
UNKNOWN('_')
IDENTIFIER('PENDING')
UNKNOWN('_')
IDENTIFIER('TRANSACTIONS')
RIGHT_PAREN(')')
RIGHT_BRACE('}')
NEW('new')
UNKNOWN('_')
IDENTIFIER('block')
UNKNOWN('_')
IDENTIFIER('index')
EQUAL('=')
IDENTIFIER('last')
UNKNOWN('_')
IDENTIFIER('block')
DOT('.')
IDENTIFIER('index')
PLUS('+')
NUMBER('1')
NEW('new')
UNKNOWN('_')
IDENTIFIER('block')
UNKNOWN('_')
IDENTIFIER('timestamp')
EQUAL('=')
IDENTIFIER('time')
DOT('.')
IDENTIFIER('time')
LEFT_PAREN('(')
RIGHT_PAREN(')')
IDENTIFIER('last')
UNKNOWN('_')
IDENTIFIER('block')
UNKNOWN('_')
IDENTIFIER('hash')
EQUAL('=')
IDENTIFIER('last')
UNKNOWN('_')
IDENTIFIER('block')
DOT('.')
IDENTIFIER('hash')
IDENTIFIER('NODE')
UNKNOWN('_')
IDENTIFIER('PENDING')
UNKNOWN('_')
IDENTIFIER('TRANSACTIONS')
EQUAL('=')
LEFT_BRACKET('[')
RIGHT_BRACKET(']')
IDENTIFIER('mined')
UNKNOWN('_')
IDENTIFIER('block')
EQUAL('=')
IDENTIFIER('Block')
LEFT_PAREN('(')
NEW('new')
UNKNOWN('_')
IDENTIFIER('block')
UNKNOWN('_')
IDENTIFIER('index')
COMMA(',')
NEW('new')
UNKNOWN('_')
IDENTIFIER('block')
UNKNOWN('_')
IDENTIFIER('timestamp')
COMMA(',')
NEW('new')
UNKNOWN('_')
IDENTIFIER('block')
UNKNOWN('_')
IDENTIFIER('data')
COMMA(',')
IDENTIFIER('last')
UNKNOWN('_')
IDENTIFIER('block')
UNKNOWN('_')
IDENTIFIER('hash')
RIGHT_PAREN(')')
IDENTIFIER('BLOCKCHAIN')
DOT('.')
IDENTIFIER('append')
LEFT_PAREN('(')
IDENTIFIER('mined')
UNKNOWN('_')
IDENTIFIER('block')
RIGHT_PAREN(')')
IDENTIFIER('print')
LEFT_PAREN('(')
IDENTIFIER('json')
DOT('.')
IDENTIFIER('dumps')
LEFT_PAREN('(')
LEFT_BRACE('{')
DOUBLE_STRING('"index"')
COLON(':')
NEW('new')
UNKNOWN('_')
IDENTIFIER('block')
UNKNOWN('_')
IDENTIFIER('index')
COMMA(',')
DOUBLE_STRING('"timestamp"')
COLON(':')
IDENTIFIER('str')
LEFT_PAREN('(')
NEW('new')
UNKNOWN('_')
IDENTIFIER('block')
UNKNOWN('_')
IDENTIFIER('timestamp')
RIGHT_PAREN(')')
COMMA(',')
DOUBLE_STRING('"data"')
COLON(':')
NEW('new')
UNKNOWN('_')
IDENTIFIER('block')
UNKNOWN('_')
IDENTIFIER('data')
COMMA(',')
DOUBLE_STRING('"hash"')
COLON(':')
IDENTIFIER('last')
UNKNOWN('_')
IDENTIFIER('block')
UNKNOWN('_')
IDENTIFIER('hash')
RIGHT_BRACE('}')
COMMA(',')
IDENTIFIER('sort')
UNKNOWN('_')
IDENTIFIER('keys')
EQUAL('=')
IDENTIFIER('True')
RIGHT_PAREN(')')
PLUS('+')
DOUBLE_STRING('"\n"')
RIGHT_PAREN(')')
IDENTIFIER('a')
DOT('.')
IDENTIFIER('send')
LEFT_PAREN('(')
IDENTIFIER('BLOCKCHAIN')
RIGHT_PAREN(')')
IDENTIFIER('requests')
DOT('.')
IDENTIFIER('get')
LEFT_PAREN('(')
IDENTIFIER('url')
EQUAL('=')
IDENTIFIER('MINER')
UNKNOWN('_')
IDENTIFIER('NODE')
UNKNOWN('_')
IDENTIFIER('URL')
PLUS('+')
SINGLE_STRING(''/blocks'')
COMMA(',')
IDENTIFIER('params')
EQUAL('=')
LEFT_BRACE('{')
SINGLE_STRING(''update'')
COLON(':')
IDENTIFIER('MINER')
UNKNOWN('_')
IDENTIFIER('ADDRESS')
RIGHT_BRACE('}')
RIGHT_PAREN(')')
FUN('def')
IDENTIFIER('find')
UNKNOWN('_')
NEW('new')
UNKNOWN('_')
IDENTIFIER('chains')
LEFT_PAREN('(')
RIGHT_PAREN(')')
COLON(':')
IDENTIFIER('other')
UNKNOWN('_')
IDENTIFIER('chains')
EQUAL('=')
LEFT_BRACKET('[')
RIGHT_BRACKET(']')
FOR('for')
IDENTIFIER('node')
UNKNOWN('_')
IDENTIFIER('url')
IN('in')
IDENTIFIER('PEER')
UNKNOWN('_')
IDENTIFIER('NODES')
COLON(':')
IDENTIFIER('block')
EQUAL('=')
IDENTIFIER('requests')
DOT('.')
IDENTIFIER('get')
LEFT_PAREN('(')
IDENTIFIER('url')
EQUAL('=')
IDENTIFIER('node')
UNKNOWN('_')
IDENTIFIER('url')
PLUS('+')
DOUBLE_STRING('"/blocks"')
RIGHT_PAREN(')')
DOT('.')
IDENTIFIER('content')
IDENTIFIER('block')
EQUAL('=')
IDENTIFIER('json')
DOT('.')
IDENTIFIER('loads')
LEFT_PAREN('(')
IDENTIFIER('block')
RIGHT_PAREN(')')
IDENTIFIER('validated')
EQUAL('=')
IDENTIFIER('validate')
UNKNOWN('_')
IDENTIFIER('blockchain')
LEFT_PAREN('(')
IDENTIFIER('block')
RIGHT_PAREN(')')
IF('if')
IDENTIFIER('validated')
COLON(':')
IDENTIFIER('other')
UNKNOWN('_')
IDENTIFIER('chains')
DOT('.')
IDENTIFIER('append')
LEFT_PAREN('(')
IDENTIFIER('block')
RIGHT_PAREN(')')
RETURN('return')
IDENTIFIER('other')
UNKNOWN('_')
IDENTIFIER('chains')
FUN('def')
IDENTIFIER('consensus')
LEFT_PAREN('(')
IDENTIFIER('blockchain')
RIGHT_PAREN(')')
COLON(':')
IDENTIFIER('other')
UNKNOWN('_')
IDENTIFIER('chains')
EQUAL('=')
IDENTIFIER('find')
UNKNOWN('_')
NEW('new')
UNKNOWN('_')
IDENTIFIER('chains')
LEFT_PAREN('(')
RIGHT_PAREN(')')
IDENTIFIER('BLOCKCHAIN')
EQUAL('=')
IDENTIFIER('blockchain')
IDENTIFIER('longest')
UNKNOWN('_')
IDENTIFIER('chain')
EQUAL('=')
IDENTIFIER('BLOCKCHAIN')
FOR('for')
IDENTIFIER('chain')
IN('in')
IDENTIFIER('other')
UNKNOWN('_')
IDENTIFIER('chains')
COLON(':')
IF('if')
IDENTIFIER('len')
LEFT_PAREN('(')
IDENTIFIER('longest')
UNKNOWN('_')
IDENTIFIER('chain')
RIGHT_PAREN(')')
LESS('<')
IDENTIFIER('len')
LEFT_PAREN('(')
IDENTIFIER('chain')
RIGHT_PAREN(')')
COLON(':')
IDENTIFIER('longest')
UNKNOWN('_')
IDENTIFIER('chain')
EQUAL('=')
IDENTIFIER('chain')
IF('if')
IDENTIFIER('longest')
UNKNOWN('_')
IDENTIFIER('chain')
EQUAL_EQUAL('==')
IDENTIFIER('BLOCKCHAIN')
COLON(':')
RETURN('return')
IDENTIFIER('False')
ELSE('else')
COLON(':')
IDENTIFIER('BLOCKCHAIN')
EQUAL('=')
IDENTIFIER('longest')
UNKNOWN('_')
IDENTIFIER('chain')
RETURN('return')
IDENTIFIER('BLOCKCHAIN')
FUN('def')
IDENTIFIER('validate')
UNKNOWN('_')
IDENTIFIER('blockchain')
LEFT_PAREN('(')
IDENTIFIER('block')
RIGHT_PAREN(')')
COLON(':')
DOUBLE_STRING('""')
DOUBLE_STRING('"Validate the submitted chain. If hashes are not correct, return false
    block(str): json
    "')
DOUBLE_STRING('""')
RETURN('return')
IDENTIFIER('True')
UNKNOWN('@')
IDENTIFIER('node')
DOT('.')
IDENTIFIER('route')
LEFT_PAREN('(')
SINGLE_STRING(''/blocks'')
COMMA(',')
IDENTIFIER('methods')
EQUAL('=')
LEFT_BRACKET('[')
SINGLE_STRING(''GET'')
RIGHT_BRACKET(']')
RIGHT_PAREN(')')
FUN('def')
IDENTIFIER('get')
UNKNOWN('_')
IDENTIFIER('blocks')
LEFT_PAREN('(')
RIGHT_PAREN(')')
COLON(':')
IF('if')
IDENTIFIER('request')
DOT('.')
IDENTIFIER('args')
DOT('.')
IDENTIFIER('get')
LEFT_PAREN('(')
DOUBLE_STRING('"update"')
RIGHT_PAREN(')')
EQUAL_EQUAL('==')
IDENTIFIER('MINER')
UNKNOWN('_')
IDENTIFIER('ADDRESS')
COLON(':')
IDENTIFIER('global')
IDENTIFIER('BLOCKCHAIN')
IDENTIFIER('BLOCKCHAIN')
EQUAL('=')
IDENTIFIER('pipe')
UNKNOWN('_')
IDENTIFIER('input')
DOT('.')
IDENTIFIER('recv')
LEFT_PAREN('(')
RIGHT_PAREN(')')
IDENTIFIER('chain')
UNKNOWN('_')
IDENTIFIER('to')
UNKNOWN('_')
IDENTIFIER('send')
EQUAL('=')
IDENTIFIER('BLOCKCHAIN')
IDENTIFIER('chain')
UNKNOWN('_')
IDENTIFIER('to')
UNKNOWN('_')
IDENTIFIER('send')
UNKNOWN('_')
IDENTIFIER('json')
EQUAL('=')
LEFT_BRACKET('[')
RIGHT_BRACKET(']')
FOR('for')
IDENTIFIER('block')
IN('in')
IDENTIFIER('chain')
UNKNOWN('_')
IDENTIFIER('to')
UNKNOWN('_')
IDENTIFIER('send')
COLON(':')
IDENTIFIER('block')
EQUAL('=')
LEFT_BRACE('{')
DOUBLE_STRING('"index"')
COLON(':')
IDENTIFIER('str')
LEFT_PAREN('(')
IDENTIFIER('block')
DOT('.')
IDENTIFIER('index')
RIGHT_PAREN(')')
COMMA(',')
DOUBLE_STRING('"timestamp"')
COLON(':')
IDENTIFIER('str')
LEFT_PAREN('(')
IDENTIFIER('block')
DOT('.')
IDENTIFIER('timestamp')
RIGHT_PAREN(')')
COMMA(',')
DOUBLE_STRING('"data"')
COLON(':')
IDENTIFIER('str')
LEFT_PAREN('(')
IDENTIFIER('block')
DOT('.')
IDENTIFIER('data')
RIGHT_PAREN(')')
COMMA(',')
DOUBLE_STRING('"hash"')
COLON(':')
IDENTIFIER('block')
DOT('.')
IDENTIFIER('hash')
RIGHT_BRACE('}')
IDENTIFIER('chain')
UNKNOWN('_')
IDENTIFIER('to')
UNKNOWN('_')
IDENTIFIER('send')
UNKNOWN('_')
IDENTIFIER('json')
DOT('.')
IDENTIFIER('append')
LEFT_PAREN('(')
IDENTIFIER('block')
RIGHT_PAREN(')')
IDENTIFIER('chain')
UNKNOWN('_')
IDENTIFIER('to')
UNKNOWN('_')
IDENTIFIER('send')
EQUAL('=')
IDENTIFIER('json')
DOT('.')
IDENTIFIER('dumps')
LEFT_PAREN('(')
IDENTIFIER('chain')
UNKNOWN('_')
IDENTIFIER('to')
UNKNOWN('_')
IDENTIFIER('send')
UNKNOWN('_')
IDENTIFIER('json')
COMMA(',')
IDENTIFIER('sort')
UNKNOWN('_')
IDENTIFIER('keys')
EQUAL('=')
IDENTIFIER('True')
RIGHT_PAREN(')')
RETURN('return')
IDENTIFIER('chain')
UNKNOWN('_')
IDENTIFIER('to')
UNKNOWN('_')
IDENTIFIER('send')
UNKNOWN('@')
IDENTIFIER('node')
DOT('.')
IDENTIFIER('route')
LEFT_PAREN('(')
SINGLE_STRING(''/txion'')
COMMA(',')
IDENTIFIER('methods')
EQUAL('=')
LEFT_BRACKET('[')
SINGLE_STRING(''GET'')
COMMA(',')
SINGLE_STRING(''POST'')
RIGHT_BRACKET(']')
RIGHT_PAREN(')')
FUN('def')
IDENTIFIER('transaction')
LEFT_PAREN('(')
RIGHT_PAREN(')')
COLON(':')
DOUBLE_STRING('""')
DOUBLE_STRING('"Each transaction sent to this node gets validated and submitted.
    Then it waits to be added to the blockchain. Transactions only move
    coins, they don't create it.
    "')
DOUBLE_STRING('""')
IF('if')
IDENTIFIER('request')
DOT('.')
IDENTIFIER('method')
EQUAL_EQUAL('==')
SINGLE_STRING(''POST'')
COLON(':')
NEW('new')
UNKNOWN('_')
IDENTIFIER('txion')
EQUAL('=')
IDENTIFIER('request')
DOT('.')
IDENTIFIER('get')
UNKNOWN('_')
IDENTIFIER('json')
LEFT_PAREN('(')
RIGHT_PAREN(')')
IF('if')
IDENTIFIER('validate')
UNKNOWN('_')
IDENTIFIER('signature')
LEFT_PAREN('(')
NEW('new')
UNKNOWN('_')
IDENTIFIER('txion')
LEFT_BRACKET('[')
SINGLE_STRING(''from'')
RIGHT_BRACKET(']')
COMMA(',')
NEW('new')
UNKNOWN('_')
IDENTIFIER('txion')
LEFT_BRACKET('[')
SINGLE_STRING(''signature'')
RIGHT_BRACKET(']')
COMMA(',')
NEW('new')
UNKNOWN('_')
IDENTIFIER('txion')
LEFT_BRACKET('[')
SINGLE_STRING(''message'')
RIGHT_BRACKET(']')
RIGHT_PAREN(')')
COLON(':')
IDENTIFIER('NODE')
UNKNOWN('_')
IDENTIFIER('PENDING')
UNKNOWN('_')
IDENTIFIER('TRANSACTIONS')
DOT('.')
IDENTIFIER('append')
LEFT_PAREN('(')
NEW('new')
UNKNOWN('_')
IDENTIFIER('txion')
RIGHT_PAREN(')')
IDENTIFIER('print')
LEFT_PAREN('(')
DOUBLE_STRING('"New transaction"')
RIGHT_PAREN(')')
IDENTIFIER('print')
LEFT_PAREN('(')
DOUBLE_STRING('"FROM: {0}"')
DOT('.')
IDENTIFIER('format')
LEFT_PAREN('(')
NEW('new')
UNKNOWN('_')
IDENTIFIER('txion')
LEFT_BRACKET('[')
SINGLE_STRING(''from'')
RIGHT_BRACKET(']')
RIGHT_PAREN(')')
RIGHT_PAREN(')')
IDENTIFIER('print')
LEFT_PAREN('(')
DOUBLE_STRING('"TO: {0}"')
DOT('.')
IDENTIFIER('format')
LEFT_PAREN('(')
NEW('new')
UNKNOWN('_')
IDENTIFIER('txion')
LEFT_BRACKET('[')
SINGLE_STRING(''to'')
RIGHT_BRACKET(']')
RIGHT_PAREN(')')
RIGHT_PAREN(')')
IDENTIFIER('print')
LEFT_PAREN('(')
DOUBLE_STRING('"AMOUNT: {0}\n"')
DOT('.')
IDENTIFIER('format')
LEFT_PAREN('(')
NEW('new')
UNKNOWN('_')
IDENTIFIER('txion')
LEFT_BRACKET('[')
SINGLE_STRING(''amount'')
RIGHT_BRACKET(']')
RIGHT_PAREN(')')
RIGHT_PAREN(')')
RETURN('return')
DOUBLE_STRING('"Transaction submission successful\n"')
ELSE('else')
COLON(':')
RETURN('return')
DOUBLE_STRING('"Transaction submission failed. Wrong signature\n"')
IDENTIFIER('elif')
IDENTIFIER('request')
DOT('.')
IDENTIFIER('method')
EQUAL_EQUAL('==')
SINGLE_STRING(''GET'')
AND('and')
IDENTIFIER('request')
DOT('.')
IDENTIFIER('args')
DOT('.')
IDENTIFIER('get')
LEFT_PAREN('(')
DOUBLE_STRING('"update"')
RIGHT_PAREN(')')
EQUAL_EQUAL('==')
IDENTIFIER('MINER')
UNKNOWN('_')
IDENTIFIER('ADDRESS')
COLON(':')
IDENTIFIER('pending')
EQUAL('=')
IDENTIFIER('json')
DOT('.')
IDENTIFIER('dumps')
LEFT_PAREN('(')
IDENTIFIER('NODE')
UNKNOWN('_')
IDENTIFIER('PENDING')
UNKNOWN('_')
IDENTIFIER('TRANSACTIONS')
COMMA(',')
IDENTIFIER('sort')
UNKNOWN('_')
IDENTIFIER('keys')
EQUAL('=')
IDENTIFIER('True')
RIGHT_PAREN(')')
IDENTIFIER('NODE')
UNKNOWN('_')
IDENTIFIER('PENDING')
UNKNOWN('_')
IDENTIFIER('TRANSACTIONS')
LEFT_BRACKET('[')
COLON(':')
RIGHT_BRACKET(']')
EQUAL('=')
LEFT_BRACKET('[')
RIGHT_BRACKET(']')
RETURN('return')
IDENTIFIER('pending')
FUN('def')
IDENTIFIER('validate')
UNKNOWN('_')
IDENTIFIER('signature')
LEFT_PAREN('(')
IDENTIFIER('public')
UNKNOWN('_')
IDENTIFIER('key')
COMMA(',')
IDENTIFIER('signature')
COMMA(',')
IDENTIFIER('message')
RIGHT_PAREN(')')
COLON(':')
DOUBLE_STRING('""')
DOUBLE_STRING('"Verifies if the signature is correct. This is used to prove
    it's you (and not someone else) trying to do a transaction with your
    address. Called when a user tries to submit a new transaction.
    "')
DOUBLE_STRING('""')
IDENTIFIER('public')
UNKNOWN('_')
IDENTIFIER('key')
EQUAL('=')
LEFT_PAREN('(')
IDENTIFIER('base64')
DOT('.')
IDENTIFIER('b64decode')
LEFT_PAREN('(')
IDENTIFIER('public')
UNKNOWN('_')
IDENTIFIER('key')
RIGHT_PAREN(')')
RIGHT_PAREN(')')
DOT('.')
IDENTIFIER('hex')
LEFT_PAREN('(')
RIGHT_PAREN(')')
IDENTIFIER('signature')
EQUAL('=')
IDENTIFIER('base64')
DOT('.')
IDENTIFIER('b64decode')
LEFT_PAREN('(')
IDENTIFIER('signature')
RIGHT_PAREN(')')
IDENTIFIER('vk')
EQUAL('=')
IDENTIFIER('ecdsa')
DOT('.')
IDENTIFIER('VerifyingKey')
DOT('.')
IDENTIFIER('from')
UNKNOWN('_')
IDENTIFIER('string')
LEFT_PAREN('(')
IDENTIFIER('bytes')
DOT('.')
IDENTIFIER('fromhex')
LEFT_PAREN('(')
IDENTIFIER('public')
UNKNOWN('_')
IDENTIFIER('key')
RIGHT_PAREN(')')
COMMA(',')
IDENTIFIER('curve')
EQUAL('=')
IDENTIFIER('ecdsa')
DOT('.')
IDENTIFIER('SECP256k1')
RIGHT_PAREN(')')
IDENTIFIER('try')
COLON(':')
RETURN('return')
IDENTIFIER('vk')
DOT('.')
IDENTIFIER('verify')
LEFT_PAREN('(')
IDENTIFIER('signature')
COMMA(',')
IDENTIFIER('message')
DOT('.')
IDENTIFIER('encode')
LEFT_PAREN('(')
RIGHT_PAREN(')')
RIGHT_PAREN(')')
IDENTIFIER('except')
COLON(':')
RETURN('return')
IDENTIFIER('False')
FUN('def')
IDENTIFIER('welcome')
UNKNOWN('_')
IDENTIFIER('msg')
LEFT_PAREN('(')
RIGHT_PAREN(')')
COLON(':')
IDENTIFIER('print')
LEFT_PAREN('(')
DOUBLE_STRING('""')
DOUBLE_STRING('"       =========================================\n
        SIMPLE COIN v1.0.0 - BLOCKCHAIN SYSTEM\n
       =========================================\n\n
        You can find more help at: https://github.com/cosme12/SimpleCoin\n
        Make sure you are using the latest version or you may end in
        a parallel chain.\n\n\n"')
DOUBLE_STRING('""')
RIGHT_PAREN(')')
IF('if')
UNKNOWN('_')
UNKNOWN('_')
IDENTIFIER('name')
UNKNOWN('_')
UNKNOWN('_')
EQUAL_EQUAL('==')
SINGLE_STRING(''__main__'')
COLON(':')
IDENTIFIER('welcome')
UNKNOWN('_')
IDENTIFIER('msg')
LEFT_PAREN('(')
RIGHT_PAREN(')')
IDENTIFIER('pipe')
UNKNOWN('_')
IDENTIFIER('output')
COMMA(',')
IDENTIFIER('pipe')
UNKNOWN('_')
IDENTIFIER('input')
EQUAL('=')
IDENTIFIER('Pipe')
LEFT_PAREN('(')
RIGHT_PAREN(')')
IDENTIFIER('miner')
UNKNOWN('_')
IDENTIFIER('process')
EQUAL('=')
IDENTIFIER('Process')
LEFT_PAREN('(')
IDENTIFIER('target')
EQUAL('=')
IDENTIFIER('mine')
COMMA(',')
IDENTIFIER('args')
EQUAL('=')
LEFT_PAREN('(')
IDENTIFIER('pipe')
UNKNOWN('_')
IDENTIFIER('output')
COMMA(',')
IDENTIFIER('BLOCKCHAIN')
COMMA(',')
IDENTIFIER('NODE')
UNKNOWN('_')
IDENTIFIER('PENDING')
UNKNOWN('_')
IDENTIFIER('TRANSACTIONS')
RIGHT_PAREN(')')
RIGHT_PAREN(')')
IDENTIFIER('miner')
UNKNOWN('_')
IDENTIFIER('process')
DOT('.')
IDENTIFIER('start')
LEFT_PAREN('(')
RIGHT_PAREN(')')
IDENTIFIER('transactions')
UNKNOWN('_')
IDENTIFIER('process')
EQUAL('=')
IDENTIFIER('Process')
LEFT_PAREN('(')
IDENTIFIER('target')
EQUAL('=')
IDENTIFIER('node')
DOT('.')
IDENTIFIER('run')
LEFT_PAREN('(')
RIGHT_PAREN(')')
COMMA(',')
IDENTIFIER('args')
EQUAL('=')
IDENTIFIER('pipe')
UNKNOWN('_')
IDENTIFIER('input')
RIGHT_PAREN(')')
IDENTIFIER('transactions')
UNKNOWN('_')
IDENTIFIER('process')
DOT('.')
IDENTIFIER('start')
LEFT_PAREN('(')
RIGHT_PAREN(')')
EOF('')